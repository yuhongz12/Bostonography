contributors()
knitr::opts_chunk$set(echo = TRUE)
library(dyplr)
library(dpylr)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
View(crime)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crimeMarch <- filter(crime, MONTH == 3)
View(crimeMarch)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crimeFeb <- filter(crime, MONTH == 2 && Lat != 0 && Long != 0)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crimeFeb <- filter(crime, MONTH == 2 && Lat == 0 && Long == 0)
View(crimeFeb)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crimeFeb <- filter(crime, MONTH == 2 && Lat != 0)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crimeFeb <- filter(crime, MONTH == 2 && Lat == 0)
head(crime)
summary(crime)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
crimeFeb <- filter(crime, MONTH == 2 && Lat == 0)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
crimeFeb <- filter(crime, MONTH == 2 && Location != '(0,0)')
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
crimeFeb <- filter(crime, MONTH == 2 && Location ! '(0,0)')
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
crimeFeb <- filter(crime, MONTH == 2 && Lat > 0)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
crimeFeb <-  crime %>% filter(Lat > 0) %>% filter(DAY_OF_WEEK == "Wednesday")
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
crimeFeb <-  crime %>% filter(Lat > 0) %>% filter(MONTH = 2)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
crimeFeb <-  crime %>% filter(Lat > 0) %>% filter(MONTH == 2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat < 0 && Long < 0)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat < 0 || Long < 0)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0 || Long > 0)
library(tidyverse)
crime <- read.csv("bostonCrime2022.csv")
crime
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
library(tmap)
install.packages()
install.packages("tmap")
library(tmap)
library(tidyverse)
library(tmap)
library(sf)
library(tidyverse)
library(tmap)
library(sf)
library(tidyverse)
library(tmap)
install.packages("tmap")
library(tmap)
library(tmap)
library(sf)
library(tidyverse)
library(tmap)
install.packages()
install.packages("terra")
library(tmap)
library(sf)
library(tidyverse)
library(tmap)
crime <- read.csv("bostonCrime2022.csv")
crime
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
tmap_mode("view")
map <- st_read("Boston_neighborhoods.shp")
st_is_valid(map)
map <- st_make_valid(map)
st_is_valid(map)
# importing neighborhood map
map <- st_read("Boston_neighborhoods.shp")
# check if the data are valid
st_is_valid(map)
# fixing the data to be valid
map <- st_make_valid(map)
# recheck if the data are valid
st_is_valid(map)
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat","Long"), crs=st_crs(map), agr = "constant")
View(crimeSF)
View(crimeSF)
tm_shape(OpenSpace) + tm_fill(col = "TypeLong") +
tm_shape(Neighborhoods) + tm_borders()
tm_shape(map) + tm_fill(col = "TypeLong") +
tm_shape(Neighborhoods) + tm_borders()
tm_shape(map) + tm_fill(col = "TypeLong") +
tm_shape(crimeFeb) + tm_borders()
tm_shape(map) + tm_fill(col = "TypeLong") +
tm_shape(crimeSF) + tm_borders()
tm_shape(crimeSF) + tm_dots()
View(map)
#tm_shape(crimeSF) + tm_dots()
tm_shape(map) + tm_fill(col = "SqMiles") + tm_borders()
tm_shape(crimeSF) + tm_dots()
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat","Long"), crs=st_crs(map), agr = "constant")
tm_shape(crimeSF) + tm_dots()
View(crimeSF)
#tm_shape(crimeSF) + tm_dots()
tm_shape(map) + tm_fill(col = "SqMiles") + tm_borders() + tm_shape(crimeSF) + tm_dots()
#tm_shape(crimeSF) + tm_dots()
tm_shape(map) + tm_dots()
#tm_shape(crimeSF) + tm_dots()
tm_shape(map) + tm_borders()
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
typeof(crime)
typeof(map)
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat","Long"), crs=st_crs(map))
tm_shape(crimeSF) + tm_dots()
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat","Long"), crs=map)
#crimeSF <- st_as_sf(crimeFeb, coords = c("Lat","Long"), crs=map)
crimeSF <- st_transform(crime, crs = st_crs(map))
# fixing the data to be valid
map <- st_make_valid(map)
# recheck if the data are valid
st_is_valid(map)
#crimeSF <- st_as_sf(crimeFeb, coords = c("Lat","Long"), crs=map)
crimeSF <- st_transform(crime, crs = st_crs(map))
st_crs(map)
#crimeSF <- st_as_sf(crimeFeb, coords = c("Lat","Long"), crs=map)
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat", "Long"))
st_is_valid(crimeSF)
st_is_valid(crime)
st_crs(crimeSF)
help("st_as_sf")
#crimeSF <- st_as_sf(crimeFeb, coords = c("Lat","Long"), crs=map)
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat", "Long"), crs = st_crs(map))
tm_shape(crimeSF) + tm_dots()
st_crs(crimeSF)
tm_shape(crimeSF)
tm_shape(crimeSF) + tm_symbols()
tm_shape(crimeSF) + tm_dots()
#crimeSF <- st_as_sf(crimeFeb, coords = c("Lat","Long"), crs=map)
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat", "Long"), crs = st_crs(map))
bCrashes %>% filter(!st_is_empty(.))
crimeSF %>% filter(!st_is_empty(.))
crimeSF <- crimeSF %>% filter(!st_is_empty(.))
tm_shape(crimeSF) + tm_dots()
tm_shape(crimeSF) + tm_dots()
#tm_shape(crimeSF) + tm_dots()
tm_shape(map) + tm_fill(col = "Name") + tm_borders()
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(tidyverse)
library(tmap)
tmap_mode("view")
crime <- read.csv("bostonCrime2022.csv")
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
# importing neighborhood map
map <- st_read("Boston_neighborhoods.shp")
# check if the data are valid
st_is_valid(map)
# fixing the data to be valid
map <- st_make_valid(map)
# recheck if the data are valid
st_is_valid(map)
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat", "Long"), crs = st_crs(map))
tm_shape(map) + tm_fill(col = "Name") + tm_borders()
tm_shape(crimeSF) + tm_dots()
tm_shape(World) +
tm_polygons("HPI") +
tm_text("name", size = "AREA")
tm_shape(crimeSF)
tm_shape(crimeSF) + tm_borders()
tm_shape(crimeSF) + tm_symbols()
library(sf)
library(tidyverse)
library(tmap)
tmap_mode("view")
crime <- read.csv("bostonCrime2022.csv")
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
# importing neighborhood map
map <- st_read("Boston_neighborhoods.shp")
# check if the data are valid
st_is_valid(map)
# fixing the data to be valid
map <- st_make_valid(map)
# recheck if the data are valid
st_is_valid(map)
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat", "Long"), crs = st_crs(map))
tm_shape(map) + tm_fill(col = "Name") + tm_borders()
tm_shape(crimeSF) + tm_dots()
tm_shape(crimeSF) + tm_dots()
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = st_crs(map))
tm_shape(map) + tm_fill(col = "Name") + tm_borders()
tm_shape(crimeSF) + tm_dots()
tm_shape(crimeSF) + tm_dots()
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat", "Long"), crs = st_crs(map))
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = st_crs(map))
tm_shape(crimeSF) + tm_dots()
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"))
tm_shape(crimeSF) + tm_dots()
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = "WGS84")
tm_shape(crimeSF) + tm_dots()
st_crs(map)
tm_shape(map) + tm_fill(col = "Name") + tm_borders() + tm_shape(crimeSF) + tm_dots()
subwayRoute <- read.csv("subwayRoute.csv")
View(subwayRoute)
subwayStop <- read.csv("subwayStop.csv")
View(subwayStop)
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_long", "stop_lat"))
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"))
View(subwayStopSF)
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = "WGS84")
tm_shape(map) + tm_fill(col = "Name") + tm_borders() + tm_shape(crimeSF) + tm_dots()
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat", "Long"), crs = "WGS84")
tm_shape(map) + tm_fill(col = "Name") + tm_borders() + tm_shape(crimeSF) + tm_dots()
crimeSF <- st_as_sf(crimeFeb, coords = c("Lat", "Long"))
tm_shape(map) + tm_fill(col = "Name") + tm_borders() + tm_shape(crimeSF) + tm_dots()
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"))
tm_shape(subwayStopSF) + tm_dots()
subwayStopSF <- st_buffer(subwayStopSF, 100)
tm_shape(subwayStopSF) + tm_dots()
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"))
subwayStopSF <- st_buffer(subwayStopSF, 100)
tm_shape(subwayStopSF) + tm_dots()
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
#subwayStopSF <- st_buffer(subwayStopSF, 100)
tm_shape(subwayStopSF) + tm_dots()
subwayStopSF <- st_buffer(subwayStopSF, 100)
subwayStopSF <- st_buffer(subwayStopSF, 100)
tm_shape(subwayStopSF) + tm_dots()
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
subwayStopSF <- st_buffer(subwayStopSF, 100)
subwayStopSF <- st_buffer(subwayStopSF, 100)
tm_shape(subwayStopSF) + tm_borders()
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_dots()
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = "WGS84")
subwayStop <- read.csv("subwayStop.csv")
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
subwayStopSF <- st_buffer(subwayStopSF, 100)
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_dots()
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
subwayStopSF <- st_buffer(subwayStopSF, 300)
subwayStopSF <- st_buffer(subwayStopSF, 300)
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_dots()
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
subwayStopSF <- st_buffer(subwayStopSF, 200)
subwayStopSF <- st_buffer(subwayStopSF, 200)
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_dots()
subwayStopSF <- st_buffer(subwayStopSF, 100)
subwayStopSF <- st_buffer(subwayStopSF, 100)
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_dots()
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
subwayStop <- read.csv("subwayStop.csv")
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
subwayStopSF <- st_buffer(subwayStopSF, 100)
subwayStopSF <- st_buffer(subwayStopSF, 100)
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_dots()
knitr::opts_chunk$set(echo = TRUE)
tmap_mode("plot")
# sf library to handle shp file and sf object
library(sf)
# sf library to handle shp file and sf object
library(sf)
# dplyr library for data cleaning functions
library(dplyr)
# tmap library for map plot and projecting
library(tmap)
tmap_mode("plot")
# importing neighborhood map
map <- st_read("Boston_neighborhoods.shp")
st_is_valid
# recheck if the data are valid
st_is_valid(map)
# fixing the data to be valid
map <- st_make_valid(map)
tm_shape(map) + tm_fill(col = "Name") + tm_borders()
subwayStop <- read.csv("subwayStop.csv")
# converting to sf data
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
# creating a 100 meter buffer for each station
subwayStopSF <- st_buffer(subwayStopSF, 200)
# plotting subsway stop buffer
tm_shape(subwayStopSF) + tm_borders()
tmap_mode("view")
subwayStop <- read.csv("subwayStop.csv")
# converting to sf data
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
# creating a 100 meter buffer for each station
subwayStopSF <- st_buffer(subwayStopSF, 200)
# plotting subsway stop buffer
tm_shape(subwayStopSF) + tm_borders()
tm_shape(subwayStopSF) +tm_borders() + tm_shape(crimeSF) + tm_borders()
tmap_mode("view")
# Importing Boston Crime 2022 Data
crime <- read.csv("bostonCrime2022.csv")
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
# converting to sf data
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = "WGS84")
# Projecting crime data onto an interactive map
tm_shape(crimeSF) + tm_dots()
tmap_mode("view")
# Importing Boston Crime 2022 Data
crime <- read.csv("bostonCrime2022.csv")
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
# converting to sf data
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = "WGS84")
# Projecting crime data onto an interactive map
tm_shape(crimeSF) + tm_dots()
# importing subway stop data
subwayStop <- read.csv("subwayStop.csv")
# converting to sf data
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
# creating a 200 meter buffer for each station
subwayStopSF <- st_buffer(subwayStopSF, 200)
# plotting subsway stop buffer
tm_shape(subwayStopSF) + tm_borders()
tm_shape(subwayStopSF) +t m_borders() + tm_shape(crimeSF) + tm_borders()
tmap_mode("view")
# Importing Boston Crime 2022 Data
crime <- read.csv("bostonCrime2022.csv")
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
# converting to sf data
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = "WGS84")
# Projecting crime data onto an interactive map
tm_shape(crimeSF) + tm_dots()
# importing subway stop data
subwayStop <- read.csv("subwayStop.csv")
# converting to sf data
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
# creating a 200 meter buffer for each station
subwayStopSF <- st_buffer(subwayStopSF, 200)
# plotting subsway stop buffer
tm_shape(subwayStopSF) + tm_borders()
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_borders()
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_dots()
knitr::opts_chunk$set(echo = TRUE)
crimeUnion <- st_intersection(crimeSF, subwayStopSF)
# sf library to handle shp file and sf object
library(sf)
# dplyr library for data cleaning functions
library(dplyr)
# tmap library for map plot and projecting
library(tmap)
# Setting our tmap to be interactive
tmap_mode("plot")
# Importing Boston Crime 2022 Data
crime <- read.csv("bostonCrime2022.csv")
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
# converting to sf data
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = "WGS84")
# Projecting crime data onto an interactive map
tm_shape(crimeSF) + tm_dots()
# importing subway stop data
subwayStop <- read.csv("subwayStop.csv")
# converting to sf data
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
# creating a 200 meters buffer for each station
subwayStopSF <- st_buffer(subwayStopSF, 200)
# plotting subway stop buffer
tm_shape(subwayStopSF) + tm_borders()
# overlaying crime data and subway stop buffer
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_dots()
crimeUnion <- st_intersection(crimeSF, subwayStopSF)
View(crimeUnion)
st_crs(crimeUnion)
# Setting our tmap to be interactive
tmap_mode("plot")
# Setting our tmap to be interactive
tmap_mode("view")
crimesPerStation <- crimeUnion %>% dplyr::select(stop_name) %>% group_by(stop_name) %>% count()
View(crimesPerStation)
crimesPerStation <- crimeUnion %>% dplyr::select(stop_name) %>% group_by(stop_name) %>% count()
crimesPerStation <- crimeUnion %>% dplyr::select(stop_name) %>% group_by(stop_name) %>% count()
cirmeCountPerStation <- full_join(subwayStopSF,crimesPerStation, on="stop_name")
cirmeCountPerStation <- st_join(subwayStopSF,crimesPerStation, on="stop_name")
cirmeCountPerStation <- st_join(subwayStop,crimesPerStation, on="stop_name")
cirmeCountPerStation <- full_join(subwayStop,crimesPerStation, on="stop_name")
View(cirmeCountPerStation)
tm_shape(crimesPerStation) + fill("n")
tm_shape(crimesPerStation) + tm_fill("n")
tm_shape(cirmeCountPerStation) + tm_fill("n")
cirmeCountPerStationSF <- st_as_sf(cirmeCountPerStation, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
tm_shape(cirmeCountPerStationSF) + tm_fill("n")
tm_shape(cirmeCountPerStationSF) + tm_shape()
tm_shape(cirmeCountPerStationSF) + tm_borders()
tm_shape(cirmeCountPerStationSF) + tm_dots()
tm_shape(cirmeCountPerStationSF) + tm_dots() + tm_fill("n")
tm_shape(cirmeCountPerStationSF) + tm_dots()
cirmeCountPerStationSF <- st_buffer(cirmeCountPerStationSF, 200)
cirmeCountPerStationSF <- st_buffer(cirmeCountPerStationSF, 200)
tm_shape(cirmeCountPerStationSF) + tm_dots()
tm_shape(cirmeCountPerStationSF) + tm_borders()
tm_shape(cirmeCountPerStationSF) + tm_borders() + tm_fill("n")
tm_shape(cirmeCountPerStationSF) + tm_borders() + tm_fill(n ="n")
tm_shape(cirmeCountPerStationSF) + tm_borders() + tm_fill("n", area = "stop_name")
tm_shape(cirmeCountPerStationSF) + tm_borders() + tm_fill("n", "stop_name")
tm_shape(cirmeCountPerStationSF) + tm_borders() + tm_fill("n", labels ="stop_name")
View(cirmeCountPerStation)
# plotting the subway staion buffer zone and filling by their counts of crime
tm_shape(cirmeCountPerStationSF) + tm_borders() + tm_fill("n")
knitr::opts_chunk$set(echo = TRUE)
# sf library to handle shp file and sf object
library(sf)
# dplyr library for data cleaning functions
library(dplyr)
# tmap library for map plot and projecting
library(tmap)
# Setting our tmap to be interactive
tmap_mode("view")
# Importing Boston Crime 2022 Data
crime <- read.csv("bostonCrime2022.csv")
# filter crime data that only happened on February
crimeFeb <-  crime %>% filter(MONTH == 2) %>%
#filter out crimes that has no location
filter(Lat > 0)
# converting to sf data
crimeSF <- st_as_sf(crimeFeb, coords = c("Long", "Lat"), crs = "WGS84")
# Projecting crime data onto an interactive map
tm_shape(crimeSF) + tm_dots()
# importing subway stop data
subwayStop <- read.csv("subwayStop.csv")
# converting to sf data
subwayStopSF <- st_as_sf(subwayStop, coords = c("stop_lon", "stop_lat"),crs = "WGS84")
# creating a 200 meters buffer for each station
subwayStopSF <- st_buffer(subwayStopSF, 200)
# plotting subway stop buffer
tm_shape(subwayStopSF) + tm_borders()
# overlaying crime data and subway stop buffer
tm_shape(subwayStopSF) + tm_borders() + tm_shape(crimeSF) + tm_dots()
# creating a union of the crime and subway station buffer data
crimeUnion <- st_intersection(crimeSF, subwayStopSF)
# count how many crimes are inside each station buffer zone
crimesPerStation <- crimeUnion %>% dplyr::select(stop_name) %>% group_by(stop_name) %>% count()
head(crimes)
view(crimesPerStation)
# creating a union of the crime and subway station buffer data
crimeUnion <- st_intersection(crimeSF, subwayStopSF)
# creating a union of the crime and subway station buffer data
crimeUnion <- st_intersection(crimeSF, subwayStopSF)
# count how many crimes are inside each station buffer zone
crimesPerStation <- crimeUnion %>% dplyr::select(stop_name) %>% group_by(stop_name) %>% count()
View(crimesPerStation)
#sort and list the stations with the most crime
crimesPerStationSorted <- arrange(crimesPerStation, n)
head(crimesPerStationSorted)
#sort and list the stations with the most to least crimes
crimesPerStationSorted <- arrange(crimesPerStation, desc(n))
head(crimesPerStationSorted)
