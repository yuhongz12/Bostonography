"b16004_042e","b16004_047e","b16004_049e","b16004_054e","b16004_059e","b16004_064e")
pov_stat_det_est <- c("c17002_001e")
pov_stat_det_moe <- c("c17002_001m")
lt_2x_pov_est <- c("c17002_001e","c17002_008e")
lt_2x_pov_moe <- c("c17002_001m","c17002_008m")
acs_pop16p <- c("b23001_001e")
acs_workers16p <- c("b08301_001e")
acs_workers16p_shr <- c("b23001_001e","b08301_001e")
dict_acsF <- hash()
acsFields <- list(acs_noninst_pop, acs_sr_noninst_pop, acs_disabled_pop, acs_sr_disab_pop, acs_hh, acs_0veh_hh, acs_low_inc_hh, acs_pop_5p, acs_lep_pop,
pov_stat_det_est, pov_stat_det_moe, lt_2x_pov_est, lt_2x_pov_moe, acs_pop16p, acs_workers16p, acs_workers16p_shr)
acsNames <- c("acs_noninst_pop", "acs_sr_noninst_pop", "acs_disabled_pop", "acs_sr_disab_pop",
"acs_hh","acs_0veh_hh", "acs_low_inc_hh", "acs_pop_5p", "acs_lep_pop",
"pov_stat_det_est", "pov_stat_det_moe", "lt_2x_pov_est",
"lt_2x_pov_moe", "acs_pop16p","acs_workers16p","acs_workers16p_shr")
dict_acsF <- hash(acsNames, acsFields)
View(dict_acsF)
dict_acsTab <- hash()
for (x in keys(dict_acsF)){
intermed <-get_acs(geography = geotype, variables = toupper(substr(dict_acsF[[x]], 1,10)), year = 2014, state = "MA")%>%
pivot_wider(names_from = variable, names_glue = "{variable}{.value}",values_from = c(estimate, moe)) %>% filter(GEOID %in% geoids)
.set(dict_acsTab, paste0(x,"_Table"), intermed)
for (x in keys(dict_acsF)){
intermed <-get_acs(geography = geotype, variables = toupper(substr(dict_acsF[[x]], 1,10)), year = 2014, state = "MA")%>%
pivot_wider(names_from = variable, names_glue = "{variable}{.value}",values_from = c(estimate, moe)) %>% filter(GEOID %in% geoids)
.set(dict_acsTab, paste0(x,"_Table"), intermed)
}
map <- read.csv("map.csv",stringsAsFactors=F)
setwd("~/Library/CloudStorage/OneDrive-NortheasternUniversity/Bostonography_S22_Share/Week 3/Day 1 - Mapping 1/Assignment")
map <- read.csv("map.csv",stringsAsFactors=F)
head(map)
election <- read.csv("election_candidates.csv",stringsAsFactors=F)
election_12 <- election[election$year==2012 & election$office == "President" & election$candidate=="Obama/ Biden",]
head(election_12)
library(tidyverse)
e_select_mapped <- inner_join(election_12,map)
library(ggplot2)
ggplot(e_select_mapped) +
geom_polygon() +
aes(x=long,y=lat,fill=percent,group=group) +
scale_fill_gradient2(midpoint=.5,low = "red",high="blue",mid="white")
# Install package to handle shape files, and then load it
# install.packages("rgdal")
library(sf)
#library(rgdal)
#library(rgeos)
world_spdf <- st_read("TM_WORLD_BORDERS_SIMPL-0.3")
#library(rgdal)
#library(rgeos)
world_spdf <- st_read("TM_WORLD_BORDERS_SIMPL-0.3.shp")
View(world_spdf)
ggplot() + geom_polygon(data = world_asdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_polygon(data = world_sdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_polygon(data = world_spdf, aes( x = long, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_polygon(data = world_spdf, aes( x = lon, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_polygon(data = world_spdf, aes( x = LON, y = lat, group = group), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_polygon(data = world_spdf, aes( x = LON, y = LAT, group = group), fill="#69b3a2", color="white") +
theme_void()
world_asdf <- tidy(world_spdf, region = "NAME")
# We use the "tidy" function in "broom" to convert it to a data frame for ggplot
#install.packages("broom")
library('maptools')
gpclibPermit()
library(broom, rgeos)
world_asdf <- tidy(world_spdf, region = "NAME")
ggplot() + geom_polygon(data = world_spdf, aes( x = LON, y = LAT), fill="#69b3a2", color="white") +
theme_void()
#library(rgdal)
#library(rgeos)
world_spdf <- st_read(system.file("TM_WORLD_BORDERS_SIMPL-0.3.shp", package="sf"))
#library(rgdal)
#library(rgeos)
world_spdf <- st_read("TM_WORLD_BORDERS_SIMPL-0.3.shp", package="sf")
#library(rgdal)
#library(rgeos)
world_spdf <- st_read("TM_WORLD_BORDERS_SIMPL-0.3.shp")
world_spdf
ggplot() + geom_polygon(data = world_spdf, aes( x = LON, y = LAT, group = group), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_polygon(data = world_spdf, aes( x = LON, y = LAT), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_polygon(data = world_spdf, aes( x = LON, y = LAT, group = REGION), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_polygon(data = world_spdf, aes( x = LON, y = LAT, group = SUBREGION), fill="#69b3a2", color="white") +
theme_void()
world_spdf <- readOGR(
dsn= getwd(),
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
library(broom, rgeos)
library(rgdal)
world_spdf <- readOGR(
dsn= getwd(),
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
gpclibPermit()
# We use the "tidy" function in "broom" to convert it to a data frame for ggplot
#install.packages("broom")
library('maptools')
world_asdf <- tidy(world_spdf, region = "NAME")
View(world_asdf)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,cache=F)
# Acquire shape file and unzip it
#download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
#system("unzip world_shape_file.zip")
# Install package to handle shape files, and then load it
# install.packages("rgdal")
library(rgdal)
library(rgeos)
world_spdf <- readOGR(
dsn= getwd(),
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# We use the "tidy" function in "broom" to convert it to a data frame for ggplot
#install.packages("broom")
library('maptools')
gpclibPermit()
library(broom, rgeos)
world_asdf <- tidy(world_spdf, region = "NAME")
detach("package:rgdal", unload = TRUE)
install.packages("GDAL")
install.packages("PROJ")
detach("package:rgeos", unload = TRUE)
detach("package:broom", unload = TRUE)
detach("package:maptools", unload = TRUE)
#library(rgdal)
#library(rgeos)
world_spdf <- st_read("TM_WORLD_BORDERS_SIMPL-0.3.shp")
View(world_spdf)
world_spdf
plot(world_spdf)
ggplot() + geom_polygon(data = world_spdf, aes( x = LON, y = LAT, group = SUBREGION), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_sf(data = world_spdf, aes( x = LON, y = LAT, group = SUBREGION), fill="#69b3a2", color="white") +
theme_void()
ggplot() + geom_sf(data = world_spdf, fill=SUBREGION, color="white") +
theme_void()
ggplot() + geom_sf(data = world_spdf, aes(fill=SUBREGION), color="white") +
theme_void()
ggplot() + geom_sf(data = world_spdf, aes(fill=REGION), color="white") +
theme_void()
world_spdf@data$POP2005[ which(world_spdf@data$POP2005 == 0)] <- NA
world_spdf$POP2005[ which(world_spdf$POP2005 == 0)] <- NA
world_spdf$POP2005LG <- log(
as.numeric(
as.character(
world_spdf$POP2005)) + 10)
world_asdf <- tidy(world_spdf, region = "NAME")
View(world_spdf)
ggplot(world_spdf) +
geom_sf() +
aes(fill=POP2005LG) +
scale_fill_gradient2(midpoint=.5,low = "red",high="blue",mid="white") +
labs(fill = "Log pop") +
theme_void()
ggplot() + geom_sf(data = world_spdf, color="white") +
theme_void()
ggplot() + geom_sf(data = world_spdf)
bari_spdf <-  st_read("Tracts_Boston BARI.shp")
ggplot(bari_asdf2) +
geom_sf()+
aes(fill=POP100) +
scale_fill_gradient2(midpoint=.5,low = "red",high="blue",mid="white") +
labs(fill = "Population") +
theme_void()
ggplot(bari_spdf) +
geom_sf()+
aes(fill=POP100) +
scale_fill_gradient2(midpoint=.5,low = "red",high="blue",mid="white") +
labs(fill = "Population") +
theme_void()
# install.packages("leaflet")
library(leaflet)
# Initialize the leaflet map with the leaflet() function
leaflet() %>%
addTiles() %>%
setView( lng = -71.06, lat = 42.36, zoom = 10 )
leaflet() %>%
addTiles() %>%
setView( lng = -71.06, lat = 42.36, zoom = 10 ) %>%
addProviderTiles("Esri.WorldImagery")
leaflet(world_spdf)%>% addTiles()  %>% setView( lat=10, lng=0 , zoom=2) %>%
addPolygons( stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color = ~colorNumeric("YlOrRd", POP2005LG)(POP2005LG) )
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,cache=F)
#setwd("~/Desktop/Dropbox/bostonography_S2020/readings, lectures, code, data/Week 2/Day 2")
map <- read.csv("map.csv",stringsAsFactors=F)
head(map)
election <- read.csv("election_candidates.csv",stringsAsFactors=F)
election_12 <- election[election$year==2012 & election$office == "President" & election$candidate=="Obama/ Biden",]
head(election_12)
library(tidyverse)
e_select_mapped <- inner_join(election_12,map)
library(tidyverse)
e_select_mapped <- inner_join(election_12,map)
library(ggplot2)
ggplot(e_select_mapped) +
geom_polygon() +
aes(x=long,y=lat,fill=percent,group=group) +
scale_fill_gradient2(midpoint=.5,low = "red",high="blue",mid="white")
# Acquire shape file and unzip it
#download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
#system("unzip world_shape_file.zip")
# Install package to handle shape files, and then load it
library(sf)
library(PROJ)
world_spdf <- st_read("TM_WORLD_BORDERS_SIMPL-0.3.shp")
ggplot() + geom_sf(data = world_spdf)
# First clean up our variable of interest, population. We log it to make the colors look less imbalanced, otherwise India and China would be the only dark ones.
world_spdf$POP2005[ which(world_spdf$POP2005 == 0)] <- NA
world_spdf$POP2005LG <- log(
as.numeric(
as.character(
world_spdf$POP2005)) + 10)
ggplot(world_spdf) +
geom_sf() +
aes(fill=POP2005LG) +
scale_fill_gradient2(midpoint=.5,low = "red",high="blue",mid="white") +
labs(fill = "Log pop") +
theme_void()
bari_spdf <-  st_read("Tracts_Boston BARI.shp")
ggplot(bari_spdf) +
geom_sf()+
aes(fill=POP100) +
scale_fill_gradient2(midpoint=.5,low = "red",high="blue",mid="white") +
labs(fill = "Population") +
theme_void()
map <- st_read("Police_Districts.shp")
library(sf)
library(PROJ)
library(tidyverse)
map <- st_read("Police_Districts.shp")
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
ggplot() + geom_sf(data = map)
tableData <- table(data$District)
ggplot() + geom_sf(data = map) + aes(fill=tableData)
tableData <- tableData + log(
as.numeric(
as.character(
world_spdf$POP2005)) + 10)
tableData) + 10)
tableData <- tableData + log( as.numeric( as.character( tableData) + 10))
tableData <- tableData + log( as.numeric(tableData + 10))
tableData <- table(data$District)
tableData1 <- tableData + log( as.numeric(tableData + 10))
tableData
tableData1
tableData1 <- tableData + log( as.numeric(tableData))
tableData1
tableData <- table(data$District)
tableData1 <- log(as.numeric(tableData))
tableData1
tableData1 <- log(as.numeric(tableData + 10))
tableData1
tableData <- table(data$District)
tableData
tableData1 <- log(as.numeric(as.character(tableData + 10)))
tableData1
tableData <- table(data$District)
tableData
tableData1 <- log(as.numeric(as.character(tableData + 10)))
tableData1
tableData <- table(data$District)
tableData
tableData1 <- log(as.numeric(as.table(tableData))
tableData1
tableData1 <- log(as.numeric(as.table(tableData)))
tableData1
tableData <- table(data$District)
tableData
tableData1 <- log(as.numeric(as.table(tableData)))
tableData1
tableData <- table(data$District)
tableData
tableData1 <- log(as.table(tableData)))
tableData1
tableData <- table(data$District)
tableData
tableData1 <- log(as.table(tableData))
tableData1
tableData
ggplot() + geom_sf(data = map)
tableData <- table(data$District)
tableData
tableData1 <- log(as.table(tableData))
tableData1
ggplot() + geom_sf(data = map) + aes(fill=tableData)
ggplot() + geom_sf(data = map) + aes(fill=tableData1)
knitr::opts_chunk$set(echo = TRUE)
ggplot() + geom_sf(data = map) + aes(fill=tableData)
ggplot() + geom_sf(data = map) + aes(fill=tableData) +  scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
labs(fill = "Shootings")
ggplot() + geom_sf(data = map) + aes(fill=tableData)
ggplot() + geom_sf(data = map) + aes(fill=tableData) +  scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
labs(fill = "Shootings")
map
summary(map)
view(map)
tableData
tableData[order(table)]
tableData[order(tableData)]
tableData[order(tableData)]
View(map)
View(map)
View(data)
View(data)
knitr::opts_chunk$set(echo = TRUE)
# Importing necessary libraries
library(sf)
library(PROJ)
library(tidyverse)
library(ggplot2)
mapData <- st_read("Police_Districts.shp")
map <- ggplot() + geom_sf(data = mapData)
map
# Importing the data
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
shootingData <- table(data$District)
shootingData
View(map)
View(map)
# Importing the data
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
View(data)
View(data)
View(data)
View(data)
# Importing the data
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
shootingData <- table(data$District)
shootingData
shootingData1 <- inner_join(mapData, data, by = "DISTRICT")
shootingData1 <- inner_join(mapData, data, by = c("District" == "DISTRICT"))
shootingData1 <- inner_join(mapData, data, by = c("District" = "DISTRICT"))
shootingData1 <- left_join(mapData, data, by = c("District" = "DISTRICT"))
shootingData1 <- right_join(mapData, data, by = c("District" = "DISTRICT"))
shootingData1
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
shootingData <- table(data$District)
shootingData
shootingData1 <- right_join(mapData, data, by = "DISTRICT")
shootingData1
View(shootingData1)
View(shootingData1)
View(shootingData1)
shootingMap2 <- map + aes(fill=DISTRICT) +  scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
labs(fill = "Shootings")
shootingMap2
shootingMap2 <- ggplot() + geom_sf(data=shootingData1) aes(fill=DISTRICT) +  scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
shootingMap2 <- ggplot() + geom_sf(data=shootingData1) + aes(fill=DISTRICT) +  scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
labs(fill = "Shootings")
shootingMap2
shootingMap2 <- ggplot() + geom_sf(data=shootingData1) + aes(fill=DISTRICT)
#+  scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
# labs(fill = "Shootings")
shootingMap2
shootingMap2 <- ggplot() + geom_sf(data=shootingData1) + aes(fill=DISTRICT)
#+  scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
# labs(fill = "Shootings")
shootingMap2
?group_by
# Importing the data
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
shootingData <- inner_join(mapData, data, b="DISTRICT")
shootingData
groupData <- shootingData %>% group_by(DISTRICT)
# Importing the data
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
shootingData <- inner_join(mapData, data, b="DISTRICT")
shootingData
groupData <- shootingData %>% group_by(DISTRICT)
goupData
# Importing the data
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
shootingData <- inner_join(mapData, data, b="DISTRICT")
shootingData
groupData <- shootingData %>% group_by(DISTRICT)
groupData
View(groupData)
View(groupData)
View(groupData)
# Importing the data
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
shootingData <- inner_join(mapData, data, b="DISTRICT")
groupData <- shootingData %>% group_by(DISTRICT)
groupData
# Importing the data
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
shootingData <- inner_join(mapData, data, b="DISTRICT")
shootingData1 <- shootingData %>% group_by(DISTRICT) %>% summarise(ShootingData = n())
shootingData1
View(shootingData1)
View(shootingData1)
View(shootingData1)
View(shootingData1)
ggplot() + geom_sf(data=shootingData1)
knitr::opts_chunk$set(echo = TRUE)
# Importing necessary libraries
library(sf)
library(PROJ)
library(tidyverse)
library(ggplot2)
ggplot() + geom_sf(data=shootingData1)
ggplot() + geom_sf(data=shootingData1) + aes(fill=shootingCount)
ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount)
ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingData)
ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingData) + scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") + labs(fill = "Shootings")
# Importing necessary libraries
library(sf)
library(PROJ)
library(tidyverse)
library(ggplot2)
mapData <- st_read("Police_Districts.shp")
map <- ggplot() + geom_sf(data = mapData)
map
# Importing the data
data <- read.csv("bostonShooting.csv", stringsAsFactors = FALSE)
shootingData <- inner_join(mapData, data, by="DISTRICT")
shootingData
shootingData1 <- shootingData %>% group_by(DISTRICT) %>% summarise(ShootingCount = n())
shootingData1
shootingMap <- ggplot() + geom_sf(shootingData1) + aes=(fill=ShootingCount)
View(shootingData1)
shootingMap <- ggplot() + geom_sf(shootingData1) + aes=(fill=shootingData)
shootingMap <- ggplot() + geom_sf(shootingData1) + aes=(fill=shootingData)
knitr::opts_chunk$set(echo = TRUE)
# Importing necessary libraries
library(sf)
library(PROJ)
library(tidyverse)
library(ggplot2)
shootingMap <- ggplot() + geom_sf(shootingData1) + aes=(fill=shootingData)
shootingMap212 <- ggplot() + geom_sf(shootingData1) + aes=(fill=shootingData)
shootingMap212 <- ggplot() + geom_sf(shootingData1) + aes=(fill=ShootingCount)
ggplot() + geom_sf(shootingData1) + aes=(fill=ShootingCount)
shootingMap212 <- ggplot() + geom_sf(data=shootingData1) + aes=(fill=ShootingCount)
ggplot() + geom_sf(data=shootingData1) + aes=(fill=ShootingCount)
ggplot() + geom_sf(data=shootingData1) + aes=(fill=ShootingData)
ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount)
# We can improve the gradient color scale as well as add a better name to the scale
#shootingMap1 <- shootingMap + scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") + labs(fill = " # of Shootings")
#shootingMap1
ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingData)
shootingMap212 <- ggplot() + geom_sf(shootingData1) + aes(fill=ShootingCount)
shootingMap212 <- ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount)
shootingMap212
# We can improve the gradient color scale as well as add a better name to the scale
#shootingMap1 <- shootingMap + scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") + labs(fill = " # of Shootings")
#shootingMap1
shootingMap <- ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount)
shootingMap
# We can improve the gradient color scale as well as add a better name to the scale
shootingMap1 <- shootingMap + scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") + labs(fill = " # of Shootings")
shootingMap1
shootingMap <- ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount)
shootingMap
# We can improve the gradient color scale as well as add a better name to the scale
shootingMap1 <- shootingMap + scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") + labs(title = " # of Shootings")
shootingMap1
shootingMap <- ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount)
shootingMap
# We can improve the gradient color scale as well as add a better name to the scale
shootingMap1 <- shootingMap + scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
labs(title = " Numbers of Shooting from Janaury 2015 to January 2022",
fill = "# of Shooting")
shootingMap1
mapData <- st_read("Police_Districts.shp")
map <- ggplot() + geom_sf(data = mapData)
map
map1 <- ggplot() + geom_sf(data = mapData) + aes(label = DISTRICT)
map1
mapData <- st_read("Police_Districts.shp")
map <- ggplot() + geom_sf(data = mapData)
map
map1 <- ggplot() + geom_sf(data = mapData) + aes(label = "DISTRICT")
map1
shootingMap <- ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount) + geom_sf_label(aes(label = DISTRICT))
# We can improve the gradient color scale as well as add a better name to the scale
shootingMap1 <- shootingMap + scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
labs(title = " Numbers of Shooting from Janaury 2015 to January 2022",
fill = "# of Shooting")
shootingMap1
shootingMap <- ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount) + geom_sf_label(aes(label=DISTRICT))
# We can improve the gradient color scale as well as add a better name to the scale
shootingMap1 <- shootingMap + scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
labs(title = " Numbers of Shooting from Janaury 2015 to January 2022",
fill = "# of Shooting")
shootingMap1
shootingMap <- ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount) + geom_sf_label(label = DISTRICT)
shootingMap <- ggplot() + geom_sf(data=shootingData1) + aes(fill=ShootingCount)
# We can improve the gradient color scale as well as add a better name to the scale
shootingMap1 <- shootingMap + scale_fill_gradient2(midpoint=.1,low = "red",high="blue",mid="white") +
labs(title = " Numbers of Shooting from Janaury 2015 to January 2022",
fill = "# of Shooting")
shootingMap1
knitr::opts_chunk$set(echo = TRUE)
mapData <- st_read("Police_Districts.shp")
# Importing necessary libraries
library(sf)
library(PROJ)
library(tidyverse)
library(ggplot2)
mapData <- st_read("Police_Districts.shp")
map <- ggplot() + geom_sf(data = mapData)
map
